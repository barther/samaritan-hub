import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.57.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const supabase = createClient(
  Deno.env.get("SUPABASE_URL") ?? "",
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
);

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get the current user from the authorization header
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      throw new Error("Authorization header required");
    }

    // Verify user has admin role
    const { data: { user }, error: authError } = await supabase.auth.getUser(
      authHeader.replace("Bearer ", "")
    );

    if (authError || !user) {
      throw new Error("Invalid authorization");
    }

    const { data: hasAdminRole } = await supabase.rpc('verify_user_role', {
      required_role: 'admin'
    });

    if (!hasAdminRole) {
      throw new Error("Admin access required");
    }

    console.log("Starting data export for admin user:", user.id);

    // Fetch all data from relevant tables
    const [
      clientsRes,
      interactionsRes,
      assistanceRequestsRes,
      disbursementsRes,
      donationsRes,
      publicIntakeRes,
      profilesRes,
      userRolesRes
    ] = await Promise.all([
      supabase.from('clients').select('*'),
      supabase.from('interactions').select('*'),
      supabase.from('assistance_requests').select('*'),
      supabase.from('disbursements').select('*'),
      supabase.from('donations').select('*'),
      supabase.from('public_intake').select('*'),
      supabase.from('profiles').select('*'),
      supabase.from('user_roles').select('*')
    ]);

    // Check for errors
    const results = [
      { name: 'clients', result: clientsRes },
      { name: 'interactions', result: interactionsRes },
      { name: 'assistance_requests', result: assistanceRequestsRes },
      { name: 'disbursements', result: disbursementsRes },
      { name: 'donations', result: donationsRes },
      { name: 'public_intake', result: publicIntakeRes },
      { name: 'profiles', result: profilesRes },
      { name: 'user_roles', result: userRolesRes }
    ];

    for (const { name, result } of results) {
      if (result.error) {
        console.error(`Error fetching ${name}:`, result.error);
        throw new Error(`Failed to fetch ${name}: ${result.error.message}`);
      }
    }

    // Helper function to convert array of objects to CSV
    const arrayToCSV = (data: any[], tableName: string) => {
      if (!data || data.length === 0) return `${tableName} (No Data)\n\n`;
      
      const headers = Object.keys(data[0]);
      const csvRows = [];
      
      // Add table name header
      csvRows.push(`${tableName}`);
      csvRows.push('');
      
      // Add column headers
      csvRows.push(headers.join(','));
      
      // Add data rows
      for (const row of data) {
        const values = headers.map(header => {
          const val = row[header];
          // Escape commas and quotes in CSV
          if (val === null || val === undefined) return '';
          const stringVal = String(val);
          if (stringVal.includes(',') || stringVal.includes('"') || stringVal.includes('\n')) {
            return `"${stringVal.replace(/"/g, '""')}"`;
          }
          return stringVal;
        });
        csvRows.push(values.join(','));
      }
      
      csvRows.push(''); // Empty line after each table
      return csvRows.join('\n');
    };

    // Generate CSV content
    let csvContent = `Good Samaritan Assistance System - Data Export\n`;
    csvContent += `Generated on: ${new Date().toISOString()}\n`;
    csvContent += `Generated by: ${user.email}\n\n`;
    csvContent += '=' .repeat(80) + '\n\n';

    csvContent += arrayToCSV(clientsRes.data || [], 'CLIENTS');
    csvContent += arrayToCSV(interactionsRes.data || [], 'INTERACTIONS');
    csvContent += arrayToCSV(assistanceRequestsRes.data || [], 'ASSISTANCE REQUESTS');
    csvContent += arrayToCSV(disbursementsRes.data || [], 'DISBURSEMENTS');
    csvContent += arrayToCSV(donationsRes.data || [], 'DONATIONS');
    csvContent += arrayToCSV(publicIntakeRes.data || [], 'PUBLIC INTAKE REQUESTS');
    csvContent += arrayToCSV(profilesRes.data || [], 'USER PROFILES');
    csvContent += arrayToCSV(userRolesRes.data || [], 'USER ROLES');

    console.log("Data export completed successfully");

    // Return CSV file
    return new Response(csvContent, {
      status: 200,
      headers: {
        ...corsHeaders,
        "Content-Type": "text/csv",
        "Content-Disposition": `attachment; filename="good-samaritan-export-${new Date().toISOString().split('T')[0]}.csv"`,
      },
    });

  } catch (error: any) {
    console.error("Error in export-data function:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "An unexpected error occurred during export" 
      }),
      {
        status: 500,
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        },
      }
    );
  }
});